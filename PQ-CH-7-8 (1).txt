
                                                                  CHAPTER 7:
                                                               ===============

1 DISPLAY FIRST_NAME , SALARY WHO GETS HIGHER SALARY THAN Diana
ANS-> SELECT FIRST_NAME , SALARY FROM EMPLOYEES WHERE SALARY > (SELECT SALARY FROM EMPLOYEES WHERE FIRST_NAME = 'Diana');

2 DISPLAY LAST_NAME , SALARY WHO GETS LOWER SALARY THAN AVERAGE SALARY.
ANS-> SELECT LAST_NAME , SALARY FROM EMPLOYEES WHERE SALARY <(SELECT AVG(SALARY)FROM EMPLOYEES);

3 DISPLAY FIRST_NAME , SALARY WHO GETS HIGHEST SALARY.
ANS-> SELECT FIRST_NAME , SALARY FROM EMPLOYEES WHERE SALARY = (SELECT MAX(SALARY) FROM EMPLOYEES);

4 DISPLAY LAST_NAME , HIRE_DATE WHO WERE HIRED FIRST IN COMPANY.
ANS-> SELECT LAST_NAME, TO_CHAR(HIRE_DATE,'YYYY') FROM EMPLOYEES WHERE TO_CHAR(HIRE_DATE,'YYYY')=(SELECT MIN(TO_CHAR(HIRE_DATE,'YYYY')) FROM EMPLOYEES);

5 DISPLAY DEPARTMENT_ID , FIRST_NAME , SALARY WHO GETS HIGHEST SALARY IN EACH DEPARTMENT.
ANS-> SELECT department_id,FIRST_NAME,SALARY FROM employees WHERE (salary, department_id) IN (SELECT mAX(salary), department_id FROM employees GROUP BY department_id) ORDER BY department_id;

6 DISPALY JOB_ID , LAST_NAME , HIRE_DATE WHO WERE HIRED LAST FOR HIS/HER JOB.
ANS-> SELECT JOB_ID,LAST_NAME,TO_CHAR(HIRE_DATE,'YYYY') FROM EMPLOYEES
 WHERE TO_CHAR(HIRE_DATE,'YYYY')=(SELECT MAX(TO_CHAR(HIRE_DATE,'YYYY')) FROM EMPLOYEES);


7 DISPLAY EMPLOYEE_ID , SALARY FOR THOSE WHO GETS HIGHEST SALARY FOR THEIR MANAGER.
ANS->  SELECT DISTINCT E.EMPLOYEE_ID,E.SALARY FROM EMPLOYEES E
 JOIN EMPLOYEES A
 ON E.EMPLOYEE_ID=A.MANAGER_ID AND E.SALARY=(SELECT MAX(E.SALARY) FROM EMPLOYEES);
 
8 DISPLAY THOSE WHO WERE HIRED BEFORE Lex.
ANS-> SELECT FIRST_NAME FROM EMPLOYEES WHERE HIRE_DATE < (SELECT HIRE_DATE FROM EMPLOYEES WHERE FIRST_NAME = 'Lex');

9 DISPLAY FIRST_NAME , DEPARTMENT_ID , SALARY , HIGHEST_SALARY OF DEPARTMENT_ID IN WHICH EMPLOYEE WORKS.
ANS-> SELECT DEPARTMENT_ID ,FIRST_NAME,SALARY, MAXSALARY FROM EMPLOYEES
 NATURAL JOIN (SELECT DEPARTMENT_ID , MAX(SALARY) MAXSALARY FROM EMPLOYEES GROUP BY DEPARTMENT_ID); 

10 DISPLAY LAST_NAME , JOB_ID , HIRE_DATE , THE DATE ON WHICH FIRST EMPLOYEE HIRED FOR THE SAME JOB.
ANS->SELECT LAST_NAME,JOB_ID,HIRE_DATE,LOW_HIRE_DATE FROM EMPLOYEES
 NATURAL JOIN (SELECT JOB_ID,MIN(HIRE_DATE) LOW_HIRE_DATE FROM EMPLOYEES GROUP BY JOB_ID);  

11 DISPLAY EMPLOYEE_ID , HIRE YEAR , SALARY , LOWEST SALARY , HIGHEST SALARY FOR THE HIRE YEAR.
ANS-> SELECT EMPLOYEE_ID , YEAR , SALARY , "MIN(SALARY)" , "MAX(SALARY)" FROM
       (SELECT EMPLOYEE_ID , TO_CHAR(HIRE_dATE,'YYYY') YEAR, SALARY FROM EMPLOYEES) JOIN
       (SELECT TO_CHAR(HIRE_DATE,'YYYY') YEAR , MIN(SALARY) , MAX(SALARY) FROM EMPLOYEES GROUP BY TO_CHAR(HIRE_DATE,'YYYY')) USING (YEAR)
       ORDER BY 2,1;

12 DISPLAY DEPARTMENT_ID , AVERAGE SALARY FOR THE DEPARTMENT WHICH GETS HIGHEST AVERAGE SALARY.
ANS->  SELECT DEPARTMENT_ID,AVG(SALARY) FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID
 HAVING AVG(SALARY)=(SELECT MAX(AVG(SALARY)) FROM EMPLOYEES GROUP BY DEPARTMENT_ID);


13 DISPLAY JOB_ID , AVERAGE SALARY FOR THE JOB_ID WHICH GETS LOWEST AVERAGE SALARY.
ANS->  SELECT JOB_ID , AVG(SALARY) FROM EMPLOYEES
	GROUP BY JOB_ID
	HAVING AVG(SALARY)=(SELECT MIN(AVG(SALARY)) FROM EMPLOYEES GROUP BY JOB_ID);

14 DISPALY MANAGER_ID , COUNT OF EMPLOYEES FOR THE MANAGER_ID TO WHOM HIGHEST NO. OF EMPLOYEE REPORTS.
ANS-> SELECT MANAGER_ID,COUNT(*) FROM EMPLOYEES GROUP BY MANAGER_ID HAVING COUNT(*)=(SELECT MAX(COUNT(*)) FROM EMPLOYEES GROUP BY MANAGER_ID);

15 DISPLAY DEPARTMENT_ID , JOB_ID , LOWEST SALARY FOR THE COMBINATION OF DEPARTMENT_ID AND JOB_ID WHICH GET HIGHEST MINIMUM SALARY.
ANS-> SELECT DEPARTMENT_ID , JOB_ID ,MIN(SALARY) FROM EMPLOYEES WHERE SALARY > (SELECT MIN(SALARY) FROM EMPLOYEES)GROUP BY DEPARTMENT_ID , JOB_ID ORDER BY 3 DESC FETCH FIRST 1 ROW ONLY;

=============================================================================--CH-7-END---==============================================================================




ch--8



1 DISPLAY ALL JOBS OF DEPTNO 10 AND 20.
select job from mpsemp where deptno = 20 UNION ALL select job from mpsemp where deptno = 10;

2 DISPLAY NON-DUPLICATE JOBS OF DEPTNO 20 AND 30.
select job from mpsemp where deptno = 20 UNION select job from mpsemp where deptno = 30;

3 DISPLAY COMMON JOBS OF DEPTNO 10,20 AND 30.
select job from mpsemp where deptno = 20 INTERSECT select job from mpsemp where deptno = 30 INTERSECT select job from mpsemp where deptno = 10;

4 DISPLAY UN-COMMON JOB OF DEPARTMENT 20 (WHICH DOESN'T EXIST IN 10 AND 30)
select distinct job from mpsemp where dptno = 20 minus (select job from mpsemp where deptno = 10 UNION ALL select job from mpsemp where deptno = 30);

5 DISPLAY UNIQUE JOBS OF DEPT 10 AND 20 FOR WHICH NO ONE WORKS IN DEPT 30.
select distinct job from mpsemp where dptno = 20 UNION select job from mpsemp where deptno = 10 minus select job from mpsemp where deptno = 30;

6 DISPLAY UNIQUE JOBS OF DEPT 30 FOR WHICN NO ONE WORKS IN DEPTNO 10 AND 20.
select distinct job from mpsemp where dptno = 30 minus (select job from mpsemp where deptno = 10 UNION ALL select job from mpsemp where deptno = 20);

7 DISPLAY ONLY NON-COMMON JOBS OF ALL DEPT.
select distinct job from mpsemp;

8 DISPLAY DEPTNO IN WHICH NO EMPLOYEE IS HIRED.
select deptno from mpsdept minus select deptno from mpsemp;

9 DISPLAY JOB FOR WHICH COMPANY HIRED EMPLOYEES IN YEAR 81 BUT NOT IN 82 AND 89.
select job from mpsemp where hiredate like '_81%' MINUS (select job from mpsemp where hiredate like '82%’ UNION ALL select job from mpsemp where hiredate like '_89%’ );

10 DISPLAY THOSE EMPNO WHO HAVE NOT GOT ANY INCREMENT.
select empno from mpsemp minus select empno from mpsincr;

11 DISPLAY THOSE NAME FOR WHICH NO TRANSACTION IS DONE.
select distinct name from mpsitmst i join mpsittrn t on t.itno!=i.itno;

12 DISPLAY THOSE NAME FOR WHICH 3 OR MORE TRANSACTION WERE DONE.
select name from mpsitmst where itno = (select itno from mpsittrn where tranqty >3);

13 DISPLAY THOSE NAME FOR WHICH 3 OR MORE ISSUE TRANSACTION WERE DONE.
select name from mpsitmst UNION select trantype from mpsittrn where trantype = 'I' and tranqty >3;

14 DISPLAY THOSE NAME FOR WHICH TRANSACTION WITH TRANQTY 1000 OR MORE IS DONE.
select name from mpsitmst where itno = (select itno from mpsittrn where tranqty >=1000);

15 DISPLAY THOSE NAME FOR WHICH ISSUE TRANSACTIONS ARE DONE BUT RECEIVE TRANSACTION ARE NOT DONE.
select name from mpsitmst UNION select trantype from mpsittrn where trantype = 'I' ;